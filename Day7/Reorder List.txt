/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        if(head.next==null || head.next.next==null) return;
        ListNode slow=head;
        ListNode fast=head;
        while(fast.next!=null&& fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        ListNode temp2=reverseList(slow.next);
        slow.next=temp2;

        ListNode temp1=head;
        ListNode s1=temp1.next;
        ListNode s2=temp2.next;
        temp1.next=temp2;
        temp1=temp1.next;

        while(s2!=null){
            temp1.next=s1;
            temp1=temp1.next;
            s1=s1.next;

            temp1.next=s2;
            temp1=temp1.next;
            s2=s2.next;
        }

        if(s1!=temp2){
            temp1.next=s1;
            temp1=temp1.next;
            s1=s1.next;  
        }

        temp1.next=null;

    }
    public ListNode reverseList(ListNode head){
        ListNode prev=null, ahead=null;
        while(head!=null){
            ahead=head.next;
            head.next=prev;
            prev=head;
            head=ahead;
        }
        head=prev;
        prev=null;
        return head;
    }
}