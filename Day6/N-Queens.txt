class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans = new ArrayList<>();
        char[][] board =new char [n][n];
        for (char[] chars : board) {
            Arrays.fill(chars, '.');
        }
        nqueen(board,0,n,ans);
        return ans;
    }

    public static void nqueen(char[][] board, int row,int n,List<List<String>> ans){
        if(row==n){
            List<String> list = new ArrayList<>();
            for(int i=0;i<n;i++){
                String str="";
                for(int j=0;j<n;j++){
                    str+=board[i][j];
                }
                list.add(str);
            }
            ans.add(list);
            return;
        }

        for(int i=0;i<n;i++){
            if(isSafe(board, row,i,n)) {
                board[row][i]='Q';
                nqueen(board, row+1,n,ans);
                board[row][i]='.';
            }
        }
    }

    public static boolean isSafe(char [][] board, int row , int col,int n){
        for(int i=0;i<n;i++){
            if(board[i][col]=='Q') return false;
        }

        for(int i=0;i<n;i++){
            if(board[row][i]=='Q') return false;
        }

        int i=row, j=col;
        while (i>=0 && j<n){
            if(board[i][j]=='Q') return false;
            i--;
            j++;
        }

        i=row; j=col;
        while (i>=0 && j>=0){
            if(board[i][j]=='Q') return false;
            i--;
            j--;
        }

        i=row; j=col;
        while (i<n && j<n){
            if(board[i][j]=='Q') return false;
            i++;
            j++;
        }

        i=row; j=col;
        while (i<n && j>=0){
            if(board[i][j]=='Q') return false;
            i++;
            j--;
        }
        return true;
    }
}